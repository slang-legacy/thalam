(function() {
  var cantCompile;

  cantCompile = function(code) {
    return throws(function() {
      return CoffeeScript.compile(code);
    });
  };

  test("ensure that carriage returns don't break compilation on Windows", function() {
    return doesNotThrow(function() {
      return CoffeeScript.compile('one\r\ntwo', {
        bare: true
      });
    });
  });

  test("--bare", function() {
    eq(-1, CoffeeScript.compile('x = y', {
      bare: true
    }).indexOf('function'));
    return ok('passed' === CoffeeScript["eval"]('"passed"', {
      bare: true,
      filename: 'test'
    }));
  });

  test("header (#1778)", function() {
    var header;
    header = "// Generated by CoffeeScript " + CoffeeScript.VERSION + "\n";
    return eq(0, CoffeeScript.compile('x = y', {
      header: true
    }).indexOf(header));
  });

  test("header is disabled by default", function() {
    var header;
    header = "// Generated by CoffeeScript " + CoffeeScript.VERSION + "\n";
    return eq(-1, CoffeeScript.compile('x = y').indexOf(header));
  });

  test("multiple generated references", function() {
    var a, c, d, _ref, _ref1;
    a = {
      b: []
    };
    a.b[true] = function() {
      return this === a.b;
    };
    c = 0;
    d = [];
    return ok((_ref = a.b)[(0 < (_ref1 = ++c) && _ref1 < 2)].apply(_ref, d));
  });

  test("splat on a line by itself is invalid", function() {
    return cantCompile("x 'a'\n...\n");
  });

  test("Issue 750", function() {
    cantCompile('f(->');
    cantCompile('a = (break)');
    cantCompile('a = (return 5 for item in list)');
    cantCompile('a = (return 5 while condition)');
    return cantCompile('a = for x in y\n  return 5');
  });

  test("Issue #986: Unicode identifiers", function() {
    var λ;
    λ = 5;
    return eq(λ, 5);
  });

  test("don't accidentally stringify keywords", function() {
    return ok((function() {
      return this === 'this';
    })() === false);
  });

  test("#1026", function() {
    return cantCompile('if a\n  b\nelse\n  c\nelse\n  d');
  });

  test("#1050", function() {
    return cantCompile("### */ ###");
  });

  test("#1106: __proto__ compilation", function() {
    var object;
    object = eq;
    this["__proto__"] = true;
    return ok(__proto__);
  });

  test("reference named hasOwnProperty", function() {
    return CoffeeScript.compile('hasOwnProperty = 0; a = 1');
  });

  test("#1055: invalid keys in real (but not work-product) objects", function() {
    return cantCompile("@key: value");
  });

  test("#1066: interpolated strings are not implicit functions", function() {
    return cantCompile('"int#{er}polated" arg');
  });

  test("#2846: while with empty body", function() {
    return CoffeeScript.compile('while 1 then', {
      sourceMap: true
    });
  });

  test("#2944: implicit call with a regex argument", function() {
    return CoffeeScript.compile('o[key] /regex/');
  });

  test("#3001: `own` shouldn't be allowed in a `for`-`in` loop", function() {
    return cantCompile("a for own b in c");
  });

}).call(this);
